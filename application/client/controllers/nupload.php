<?phpclass Nupload extends CI_Controller {    private $_title = '文件上传';    private $_tool = '';    private $_thumbPath = '';    private $_imageSize = array(        'exchange' => array('width' => 120, 'height' => 120),        'watermark' => array('width' => 24, 'height' => 24),        'demand' => array('width' => 180, 'height' => 180),        'supply' => array('width' => 180, 'height' => 180),        'user' => array('width' => 100, 'height' => 100),         'brand' => array('width' => 130, 'height' => 60),        'product_category' => array('width' => 120, 'height' => 120),        'ad_store1' => array('width' => 285, 'height' => 70),        'ad_store2' => array('width' => 285, 'height' => 70),        'store_banner' => array('width' => 190, 'height' => 70),        'store_logo' => array('width' => 190, 'height' => 70),        'product' => array('width' => 280, 'height' => 280, 'max_width' => 418, 'max_height' => 418),        'comment' => array('width' => 280, 'height' => 280, 'max_width' => 418, 'max_height' => 418),    );    public function __construct() {        parent::__construct();        $this->load->model('User_model', '', TRUE);        $this->load->model('Attachment_model', '', TRUE);        $this->load->model('Watermark_model', '', TRUE);        $this->load->model('Ad_store_model', '', TRUE);        $this->load->model('Store_model', '', TRUE);        $this->load->helper(array('url', 'my_fileoperate', 'my_ajaxerror'));        $this->_beforeFilter();    }    private function _upload($model = '', $field, $filePath = './uploads', $ext = 'gif|jpg|jpeg|png', $maxSize = '4048') {        $baseDir = $filePath;        $config['upload_path'] = createDateTimeDir($baseDir);        $config['file_name'] = getUniqueFileName($baseDir);        $config['allowed_types'] = $ext;        $config['max_size'] = $maxSize;        $this->load->library('upload', $config);        $this->_thumbPath = substr($config['upload_path'], 2);        if ($this->upload->do_upload($field)) {            return $this->upload->data();        } else {            return false;        }        return fasle;    }    private function _resize($fileName, $width = '100', $height = '100', $thumbMarker = '_thumb') {        $this->config->load('image_config', TRUE);        $imageConfig = $this->config->item('image_config');        $imageConfig['source_image'] = $fileName;        $imageConfig['new_image'] = $fileName;        $imageConfig['width'] = $width;        $imageConfig['height'] = $height;        $imageConfig['thumb_marker'] = $thumbMarker;        $this->load->library('image_lib');        $this->image_lib->initialize($imageConfig);        return $this->image_lib->resize();    }    private function _crop($fileName, $width = '100', $height = '100', $x, $y, $thumbMarker = '_thumb') {        $this->config->load('image_config', TRUE);        $imageConfig = $this->config->item('image_config');        $imageConfig['source_image'] = $fileName;        $imageConfig['new_image'] = $fileName;        $imageConfig['width'] = $width;        $imageConfig['height'] = $height;        $imageConfig['x_axis'] = $x;        $imageConfig['y_axis'] = $y;        $imageConfig['thumb_marker'] = $thumbMarker;        $imageConfig['maintain_ratio'] = false;        $this->load->library('image_lib');        $this->image_lib->initialize($imageConfig);        return $this->image_lib->crop();    }    private function _watermark($sourcFileName, $watermarkPath, $vrt = 'bottom', $hor = 'right') {        $this->config->load('watermark_config', TRUE);        $watermarkConfig = $this->config->item('watermark_config');        $watermarkConfig['source_image'] = $sourcFileName;        $watermarkConfig['wm_overlay_path'] = $watermarkPath;        $watermarkConfig['wm_vrt_alignment'] = $vrt;        $watermarkConfig['wm_hor_alignment'] = $hor;        $this->load->library('image_lib');        $this->image_lib->initialize($watermarkConfig);        return $this->image_lib->watermark();    }    //批量上传图片进行打水印,批量，上传图片用图片一个插件    public function uploadImageByW() {        if ($_POST) {            $model = $_POST['model'];            $baseDir = './uploads';            $verifyToken = md5('unique_salt' . $_POST['timestamp']);            if (!empty($_FILES) && $_POST['token'] == $verifyToken) {                if (isset($_FILES['field']) && is_uploaded_file($_FILES['field']['tmp_name']) && $_FILES['field']['error'] == 0) {                    $uploadFile = $_FILES['field'];                    $uploadPath = createDateTimeDir($baseDir);                    $uniqueFileName = getUniqueFileName($uploadPath);                    $fileExt = getFileExt($uploadFile['name']);                    $uploadFile['name'] = $uniqueFileName . '.' . $fileExt;                    $uploadFile['filename'] = $uploadPath . '/' . $uploadFile['name'];                    $size = $uploadFile['size'];                    if (@move_uploaded_file($uploadFile['tmp_name'], $uploadFile['filename'])) {                        if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {                            //打水印                            $watermarkInfo = $this->Watermark_model->get('*', array('id' => 1, 'is_open' => 1));                            if ($watermarkInfo && $watermarkInfo['path']) {                                $location = explode(',', $watermarkInfo['location']);                                $this->_watermark($uploadFile['filename'], "./" . $watermarkInfo['path'], $location[0], $location[1]);                            }                            $fields = array(                                'path' => substr($uploadFile['filename'], 2),                                'width' => 0,                                'height' => 0,                                'size' => $size,                                'alt' => ''                            );                            $attachmentId = $this->Attachment_model->save($fields);                            if ($attachmentId) {                                $path = substr($uploadFile['filename'], 2);                                $tmp_image_arr = $this->_fliter_image_path($path);                                printAjaxData(array('id' => $attachmentId, 'path' => $path, 'path_url' => $tmp_image_arr['path'], 'path_thumb_url' => $tmp_image_arr['path_thumb']));                            } else {                                printAjaxError('fail', '上传图片失败');                            }                        } else {                            printAjaxError('fail', '生成缩略图失败');                        }                    } else {                        printAjaxError('fail', '复制文件错误');                    }                } else {                    printAjaxError('field', 'field构造错误');                }            } else {                printAjaxError('token', 'token参数错误');            }        }    }    //修改用户头像    public function change_user_image() {        if (!$this->session->userdata("user_id")) {            printAjaxError('login', '请登录');        }        if ($_POST) {            $user_id = $this->session->userdata("user_id");            $user_info = $this->User_model->get('id', array('id' => $user_id));            if (!$user_info) {                printAjaxError('fail', '用户信息不存在');            }            $model = $_POST['model'];            $baseDir = './uploads';            $verifyToken = md5('unique_salt' . $_POST['timestamp']);            if (!empty($_FILES) && $_POST['token'] == $verifyToken) {                if (isset($_FILES['field']) && is_uploaded_file($_FILES['field']['tmp_name']) && $_FILES['field']['error'] == 0) {                    $uploadFile = $_FILES['field'];                    $uploadPath = createDateTimeDir($baseDir);                    $uniqueFileName = getUniqueFileName($uploadPath);                    $fileExt = getFileExt($uploadFile['name']);                    $uploadFile['name'] = $uniqueFileName . '.' . $fileExt;                    $uploadFile['filename'] = $uploadPath . '/' . $uploadFile['name'];                    $size = $uploadFile['size'];                    if (@move_uploaded_file($uploadFile['tmp_name'], $uploadFile['filename'])) {                        if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {                            $fields = array(                                'path' => substr($uploadFile['filename'], 2),                                'width' => 0,                                'height' => 0,                                'size' => $size,                                'alt' => ''                            );                            $attachmentId = $this->Attachment_model->save($fields);                            if ($attachmentId) {                                $path = substr($uploadFile['filename'], 2);                                $tmp_image_arr = $this->_fliter_image_path($path);                                if ($model == 'user') {                                    if (!$this->User_model->save(array('path' => $path), array('id' => $user_info['id']))) {                                        printAjaxError('fail', '用户头像修改失败');                                    }                                }                                printAjaxData(array('id' => $attachmentId, 'path' => $path, 'path_url' => $tmp_image_arr['path'], 'path_thumb_url' => $tmp_image_arr['path_thumb']));                            } else {                                printAjaxError('fail', '上传图片失败');                            }                        } else {                            printAjaxError('fail', '生成缩略图失败');                        }                    } else {                        printAjaxError('fail', '复制文件错误');                    }                } else {                    printAjaxError('field', 'field构造错误');                }            } else {                printAjaxError('token', 'token参数错误');            }        }    }    public function uploadImage() {        if ($_POST) {            $model = $this->input->post('model', TRUE);            if ($model == 'store_logo' || $model == 'store_banner') {                $user_id = $this->session->userdata("user_id");                $user_info = $this->User_model->get('id', array('id' => $user_id));                if (!$user_info) {                    printAjaxError('fail', '用户信息不存在');                }                $store_info = $this->Store_model->get('id', array('user_id' => $user_id));                if(!$store_info){                    printAjaxError('fail', '对不起，您不是店铺用户');                }            }            $baseDir = './uploads';            $verifyToken = md5('unique_salt' . $_POST['timestamp']);            if (!empty($_FILES) && $_POST['token'] == $verifyToken) {                if (isset($_FILES['field']) && is_uploaded_file($_FILES['field']['tmp_name']) && $_FILES['field']['error'] == 0) {                    $uploadFile = $_FILES['field'];                    $uploadPath = createDateTimeDir($baseDir);                    $uniqueFileName = getUniqueFileName($uploadPath);                    $fileExt = getFileExt($uploadFile['name']);                    $uploadFile['name'] = $uniqueFileName . '.' . $fileExt;                    $uploadFile['filename'] = $uploadPath . '/' . $uploadFile['name'];                    $size = $uploadFile['size'];                    if (@move_uploaded_file($uploadFile['tmp_name'], $uploadFile['filename'])) {                        if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {                            $fields = array(                                'path' => substr($uploadFile['filename'], 2),                                'width' => 0,                                'height' => 0,                                'size' => $size,                                'alt' => ''                            );                            $attachmentId = $this->Attachment_model->save($fields);                            if ($attachmentId) {                                $path = substr($uploadFile['filename'], 2);                                $tmp_image_arr = $this->_fliter_image_path($path);                                if ($model == 'store_logo') {                                    if (!$this->Store_model->save(array('path' => $path), array('id' => $store_info['id']))) {                                        printAjaxError('store_logo', '店铺logo修改失败');                                    }                                }                                 if ($model == 'store_banner') {                                    if (!$this->Store_model->save(array('store_banner' => $path), array('id' => $store_info['id']))) {                                        printAjaxError('store_banner', '店铺banner修改失败');                                    }                                }                                printAjaxData(array('id' => $attachmentId, 'path' => $path, 'path_url' => $tmp_image_arr['path'], 'path_thumb_url' => $tmp_image_arr['path_thumb']));                            } else {                                printAjaxError('fail', '上传图片失败');                            }                        } else {                            printAjaxError('fail', '生成缩略图失败');                        }                    } else {                        printAjaxError('fail', '复制文件错误');                    }                } else {                    printAjaxError('field', 'field构造错误');                }            } else {                printAjaxError('token', 'token参数错误');            }        }    }      public function upload_ad_store() {        $user_id = $this->session->userdata("user_id");        $user_info = $this->User_model->get('id', array('id' => $user_id));        if (!$user_info) {            printAjaxError('fail', '用户信息不存在');        }        $store_info = $this->Store_model->get('id', array('user_id' => $user_id));        if(!$store_info){            printAjaxError('fail', '对不起，您不是店铺用户');        }        if ($_POST) {            $model = $_POST['model'];            $position = $model == 'ad_store1' ? 1 : 2;            $count = $this->Ad_store_model->rowCount(array('position' => $position, 'store_id' => $store_info['id']));            if ($count + count($_FILES['field']['tmp_name']) > 5) {                printAjaxError('fail', '最多上传5张');            }            $baseDir = './uploads';            $verifyToken = md5('unique_salt' . $_POST['timestamp']);            if (!empty($_FILES) && $_POST['token'] == $verifyToken) {                if (isset($_FILES['field']) && is_uploaded_file($_FILES['field']['tmp_name']) && $_FILES['field']['error'] == 0) {                    $uploadFile = $_FILES['field'];                    $uploadPath = createDateTimeDir($baseDir);                    $uniqueFileName = getUniqueFileName($uploadPath);                    $fileExt = getFileExt($uploadFile['name']);                    $uploadFile['name'] = $uniqueFileName . '.' . $fileExt;                    $uploadFile['filename'] = $uploadPath . '/' . $uploadFile['name'];                    $size = $uploadFile['size'];                    if (@move_uploaded_file($uploadFile['tmp_name'], $uploadFile['filename'])) {                        if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {                              $ad_store_info = $this->Ad_store_model->get('max(sort) as max_sort',array('position'=>$position,'store_id'=>$store_info['id']));                                if($ad_store_info){                                    $sort = $ad_store_info['max_sort']+1;                                }else{                                    $sort = 0;                                }                                $path = substr($uploadFile['filename'], 2);                                $fields = array(                                    'path' => $path,                                    'store_id' => $store_info['id'],                                    'position' => $position,                                    'sort' => $sort                                );                                $retId = $this->Ad_store_model->save($fields);                                $tmp_image_arr = $this->_fliter_image_path($path);                                printAjaxData(array('id' => $retId, 'path' => $path, 'path_url' => $tmp_image_arr['path'], 'path_thumb_url' => $tmp_image_arr['path_thumb']));                                                        } else {                            printAjaxError('fail', '生成缩略图失败');                        }                    } else {                        printAjaxError('fail', '复制文件错误');                    }                } else {                    printAjaxError('field', 'field构造错误');                }            } else {                printAjaxError('token', 'token参数错误');            }        }    }    //评价晒单//    public function upload_order_comment() {//        $user_id = $this->session->userdata("user_id");//        $user_info = $this->User_model->get('id', array('id' => $user_id));//        if (!$user_info) {//            printAjaxError('fail', '用户信息不存在');//        }//        if ($_POST) {//            if (count($_FILES['field']['tmp_name']) > 4) {//                printAjaxError('fail', '最多上传4张');//            }//            $baseDir = './uploads';//            $model = 'comment';//            $verifyToken = md5('unique_salt' . $_POST['timestamp']);//            if (!empty($_FILES) && $_POST['token'] == $verifyToken) {//                if ($_FILES['field']['tmp_name']) {//                    foreach ($_FILES['field']['tmp_name'] as $key => $value) {//                        if (is_uploaded_file($value)) {//                            $uploadPath = createDateTimeDir($baseDir);//                            $uniqueFileName = getUniqueFileName($uploadPath);//                            $fileExt = 'png';//                            $uploadFile['name'] = $uniqueFileName . '.' . $fileExt;//                            $uploadFile['filename'] = $uploadPath . '/' . $uploadFile['name'];//                            if (@move_uploaded_file($value, $uploadFile['filename'])) {//                                if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {//                                    if ($model == 'product') {//                                        $this->_resize($uploadFile['filename'], $this->_imageSize[$model]['max_width'], $this->_imageSize[$model]['max_height'], '_max');//                                    }//                                    //打水印//                                    $watermarkInfo = $this->Watermark_model->get('*', array('id' => 1, 'is_open' => 1));//                                    if ($watermarkInfo && $watermarkInfo['path']) {//                                        $location = explode(',', $watermarkInfo['location']);//                                        $this->_watermark($uploadFile['filename'], "./" . $watermarkInfo['path'], $location[0], $location[1]);//                                    }//                                    $path = substr($uploadFile['filename'], 2);//                                    $tmp_image_arr = $this->_fliter_image_path($path);//                                    $fields = array(//                                        'path' => $path,//                                        'width' => 0,//                                        'height' => 0,//                                        'size' => 0,//                                        'alt' => ''//                                    );//                                    $attachmentId = $this->Attachment_model->save($fields);//                                    if ($attachmentId) {//                                        $ret[] = array('id' => $attachmentId, 'path' => $path, 'path_url' => $tmp_image_arr['path'], 'path_thumb_url' => $tmp_image_arr['path_thumb']);//                                    } else {//                                        printAjaxError('fail', '上传图片失败');//                                    }//                                } else {//                                    printAjaxError('fail', '生成缩略图失败');//                                }//                            } else {//                                printAjaxError('fail', '复制文件错误');//                            }//                        }//                    }//                } else {//                    printAjaxError('field', 'field构造错误');//                }//            } else {//                printAjaxError('token', 'token参数错误');//            }//            printAjaxData(array('ret' => $ret));//        }//    }    public function upload_order_comment() {        $user_id = $this->session->userdata("user_id");        $user_info = $this->User_model->get('id', array('id' => $user_id));        if (!$user_info) {            printAjaxError('fail', '用户信息不存在');        }        if ($_POST) {            $baseDir = './uploads';            $model = 'comment';            $verifyToken = md5('unique_salt' . $_POST['timestamp']);            if (!empty($_FILES) && $_POST['token'] == $verifyToken) {                if (isset($_FILES['field']) && is_uploaded_file($_FILES['field']['tmp_name']) && $_FILES['field']['error'] == 0) {                    $uploadFile = $_FILES['field'];                    $uploadPath = createDateTimeDir($baseDir);                    $fileExt = getFileExt($uploadFile['name']);                    $uniqueFileName = getUniqueFileName($uploadPath,$fileExt);                    $uploadFile['name'] = $uniqueFileName . '.' . $fileExt;                    $uploadFile['filename'] = $uploadPath . '/' . $uploadFile['name'];                    $size = $uploadFile['size'];                    if (@move_uploaded_file($uploadFile['tmp_name'], $uploadFile['filename'])) {                        if ($this->_resize($uploadFile['filename'], $this->_imageSize[$model]['width'], $this->_imageSize[$model]['height'])) {                            //打水印                            $watermarkInfo = $this->Watermark_model->get('*', array('id' => 1, 'is_open' => 1));                            if ($watermarkInfo && $watermarkInfo['path']) {                                $location = explode(',', $watermarkInfo['location']);                                $this->_watermark($uploadFile['filename'], "./" . $watermarkInfo['path'], $location[0], $location[1]);                            }                            $fields = array(                                'path' => substr($uploadFile['filename'], 2),                                'width' => 0,                                'height' => 0,                                'size' => $size,                                'alt' => ''                            );                            $attachmentId = $this->Attachment_model->save($fields);                            if ($attachmentId) {                                $path = substr($uploadFile['filename'], 2);                                $tmp_image_arr = $this->_fliter_image_path($path);                                printAjaxData(array('id' => $attachmentId, 'path' => $path, 'path_url' => $tmp_image_arr['path'], 'path_thumb_url' => $tmp_image_arr['path_thumb']));                            } else {                                printAjaxError('fail', '上传图片失败');                            }                        } else {                            printAjaxError('fail', '生成缩略图失败');                        }                    } else {                        printAjaxError('fail', '复制文件错误');                    }                } else {                    printAjaxError('field', 'field构造错误');                }            } else {                printAjaxError('token', 'token参数错误');            }        }    }        private function _fliter_image_path($image_path = NULL) {        $path = '';        $path_thumb = '';        if ($image_path) {            $path = base_url() . $image_path;            $path_thumb = base_url() . preg_replace('/\./', '_thumb.', $image_path);        }        return array('path' => $path, 'path_thumb' => $path_thumb);    }    private function _beforeFilter() {        $sid = $this->input->get('sid');        if ($sid) {            $this->session->parseSessionId(preg_replace('/sid-/', '', $sid));        }    }}/* End of file upload.php *//* Location: ./application/admin/controllers/upload.php */